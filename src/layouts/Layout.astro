---
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Alata&family=Josefin+Sans:wght@300&display=swap" rel="stylesheet">
    <meta name="generator" content={Astro.generator} />

    <title>{title}</title>
  </head>
  <body>
    <slot />
  </body>
</html>
<style is:global>
  @import "open-props/normalize";
  :root {
    /* Colors */
    --crl-white: 0 0% 100%;
    --crl-black: 0 0% 0%;
    --crl-dark-gray: 0 0% 55%;
    --crl-darker-gray: 0 0% 41%;
    --crl-pink: 295 54% 64%;
    
    /* Typography */
    --fs-base: 15px;
    --ff-secondary:  'Alata', sans-serif;
    --ff-primary: 'Josefin Sans', sans-serif;

 
    
  }

  html {
    font-size: var(--fs-base);
    font-family: var(--ff-primary);
  }

  body {
    background: hsl(var(--crl-white));
    color: hsl(var(--crl-black));
  }

  :is(h1,h2,h3) {
    color: hsl(var(--crl-black));
    text-transform: uppercase;
  }

  .wrapper {
    width: 85%;
    max-width: 1269px;
    margin-inline: auto;
  }

  ::selection {
    background-color: var(--crl-pink);
    color: var(--crl-white);;
  }

  @media screen and (min-width: 850px) {
    .wrapper {
       width: 80%;
    }
  }

  /* Colors */
  .bg-primary {
    background-color: hsl(var(--crl-black));
  }
  .text-white {
    color: hsl(var(--crl-white));
  }

  /* Text */
  .text-center {
    text-align: center;
  }

  .fs-lg {
    font-size: var(--size-7);
  }

  .fs-sm {
    font-size: var(--size-5);
  }

  .text-gray-dark {
    color: hsl(var(--crl-dark-gray));
  }

  .text-gray-darker {
    color: hsl(var(--crl-darker-gray));
  }

  .font-primary {
    font-family: var(--ff-primary);
  }

  .font-secondary {
    font-family: var(--ff-secondary);
  }

  .flex {
    display: flex;
  }
  .flex-col {
    flex-direction: column;
  }
  .flex-wrap {
    flex-wrap: wrap;
  }
  .justify-between {
    justify-content: space-between;
  }
  .justify-center {
    justify-content: center;
  }
  .full-width {
    width: 100%;
  }
  .max-width-full {
    max-width: 100%;
  }
  .items-center {
    align-items: center;
  }

  .ml-auto {
    margin-left: auto;
  }
  .p-top {
    --p-top: var(--size-3);
    padding-block: var(--p-top);
  }

  .p-bottom {
    --p-bottom: var(--size-3);
    padding-bottom: var(--p-bottom);
  }
  .pad {
    --pad: var(--size-2);
    padding: var(--pad);
  }
  .p-block {
    --p-block: var(--size-6);
    padding-block: var(--p-block);
  }
  .m-block {
     --m-block: var(--size-6);
    margin-block: var(--m-block);
  }

  .m-bottom {
     --m-bottom: var(--size-6);
    margin-bottom: var(--m-bottom);
  }
  .gap {
    --gap-size: var(--size-3);
    gap: var(--gap-size);
  }
  .relative {
    position: relative;
  }

  .text-sm {
    font-size: var(--size-3);
  }
  
  /* Grids */

  .grid-auto-fit {
    --min-width-column: 200px;
    display: grid;
    grid-template-columns: repeat(auto-fit,minmax(var(--min-width-column),1fr));
  }
  
  .content-center {
    place-content: center;
  }

  /* Buttons */
  button {
    background: 0;
    padding: .5rem 1rem .3rem;
    border: 1px solid hsl(var(--crl-darker-gray));
    display: flex;
    letter-spacing: .2rem;
    color: hsl(var(--crl-black));
    font-weight: bold;
  }

  button:hover {
    background-color: hsl(var(--crl-black));
    color: hsl(var(--crl-white))
  }

  /** APP ICONS **/

  svg.icon-sm {
    width: var(--size-7);
    height: var(--size-7);
  }

  ul {
    list-style-type: none;
    padding: 0;
  }

  
</style>
